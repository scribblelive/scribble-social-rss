{"ts":1374275662121,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1374275664036,"patch":[[{"diffs":[[1,"<?php\n/******************************************************************************\n * Copyright (c) 2010 Jevon Wright and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Jevon Wright - initial API and implementation\n ****************************************************************************/\n\n/**\n * Tries to convert the given HTML into a plain text format - best suited for\n * e-mail display, etc.\n *\n * <p>In particular, it tries to maintain the following features:\n * <ul>\n *   <li>Links are maintained, with the 'href' copied over\n *   <li>Information in the &lt;head&gt; is lost\n * </ul>\n *\n * @param html the input HTML\n * @return the HTML converted, as best as possible, to text\n */\nfunction convert_html_to_text($html) {\n        $html = fix_newlines($html);\n\n        $doc = new DOMDocument();\n        if (!$doc->loadHTML($html))\n                throw new Html2TextException(\"Could not load HTML - badly formed?\", $html);\n\n        $output = iterate_over_node($doc);\n\n        // remove leading and trailing spaces on each line\n        $output = preg_replace(\"/[ \\t]*\\n[ \\t]*/im\", \"\\n\", $output);\n\n        // remove leading and trailing whitespace\n        $output = trim($output);\n\n        return $output;\n}\n\n/**\n * Unify newlines; in particular, \\r\\n becomes \\n, and\n * then \\r becomes \\n. This means that all newlines (Unix, Windows, Mac)\n * all become \\ns.\n *\n * @param text text with any number of \\r, \\r\\n and \\n combinations\n * @return the fixed text\n */\nfunction fix_newlines($text) {\n        // replace \\r\\n to \\n\n        $text = str_replace(\"\\r\\n\", \"\\n\", $text);\n        // remove \\rs\n        $text = str_replace(\"\\r\", \"\\n\", $text);\n\n        return $text;\n}\n\nfunction next_child_name($node) {\n        // get the next child\n        $nextNode = $node->nextSibling;\n        while ($nextNode != null) {\n                if ($nextNode instanceof DOMElement) {\n                        break;\n                }\n                $nextNode = $nextNode->nextSibling;\n        }\n        $nextName = null;\n        if ($nextNode instanceof DOMElement && $nextNode != null) {\n                $nextName = strtolower($nextNode->nodeName);\n        }\n\n        return $nextName;\n}\nfunction prev_child_name($node) {\n        // get the previous child\n        $nextNode = $node->previousSibling;\n        while ($nextNode != null) {\n                if ($nextNode instanceof DOMElement) {\n                        break;\n                }\n                $nextNode = $nextNode->previousSibling;\n        }\n        $nextName = null;\n        if ($nextNode instanceof DOMElement && $nextNode != null) {\n                $nextName = strtolower($nextNode->nodeName);\n        }\n\n        return $nextName;\n}\n\nfunction iterate_over_node($node) {\n        if ($node instanceof DOMText) {\n                return preg_replace(\"/\\\\s+/im\", \" \", $node->wholeText);\n        }\n        if ($node instanceof DOMDocumentType) {\n                // ignore\n                return \"\";\n        }\n\n        $nextName = next_child_name($node);\n        $prevName = prev_child_name($node);\n\n        $name = strtolower($node->nodeName);\n\n        // start whitespace\n        switch ($name) {\n                case \"hr\":\n                        return \"------\\n\";\n\n                case \"style\":\n                case \"head\":\n                case \"title\":\n                case \"meta\":\n                case \"script\":\n                        // ignore these tags\n                        return \"\";\n\n                case \"h1\":\n                case \"h2\":\n                case \"h3\":\n                case \"h4\":\n                case \"h5\":\n                case \"h6\":\n                        // add two newlines\n                        $output = \"\\n\";\n                        break;\n\n                case \"p\":\n                case \"div\":\n                        // add one line\n                        $output = \"\\n\";\n                        break;\n\n                default:\n                        // print out contents of unknown tags\n                        $output = \"\";\n                        break;\n        }\n\n        // debug\n        //$output .= \"[$name,$nextName]\";\n\n        for ($i = 0; $i < $node->childNodes->length; $i++) {\n                $n = $node->childNodes->item($i);\n\n                $text = iterate_over_node($n);\n\n                $output .= $text;\n        }\n\n        // end whitespace\n        switch ($name) {\n                case \"style\":\n                case \"head\":\n                case \"title\":\n                case \"meta\":\n                case \"script\":\n                        // ignore these tags\n                        return \"\";\n\n                case \"h1\":\n                case \"h2\":\n                case \"h3\":\n                case \"h4\":\n                case \"h5\":\n                case \"h6\":\n                        $output .= \"\\n\";\n                        break;\n\n                case \"p\":\n                case \"br\":\n                        // add one line\n                        if ($nextName != \"div\")\n                                $output .= \"\\n\";\n                        break;\n\n                case \"div\":\n                        // add one line only if the next child isn't a div\n                        if ($nextName != \"div\" && $nextName != null)\n                                $output .= \"\\n\";\n                        break;\n\n                case \"a\":\n                        // links are returned in [text](link) format\n                        $href = $node->getAttribute(\"href\");\n                        if ($href == null) {\n                                // it doesn't link anywhere\n                                if ($node->getAttribute(\"name\") != null) {\n                                        $output = \"[$output]\";\n                                }\n                        } else {\n                                if ($href == $output) {\n                                        // link to the same address: just use link\n                                        $output;\n                                } else {\n                                        // replace it\n                                        $output = \"[$output]($href)\";\n                                }\n                        }\n\n                        // does the next node require additional whitespace?\n                        switch ($nextName) {\n                                case \"h1\": case \"h2\": case \"h3\": case \"h4\": case \"h5\": case \"h6\":\n                                        $output .= \"\\n\";\n                                        break;\n                        }\n\n                default:\n                        // do nothing\n        }\n\n        return $output;\n}\n\nclass Html2TextException extends Exception {\n        var $more_info;\n\n        public function __construct($message = \"\", $more_info = \"\") {\n                parent::__construct($message);\n                $this->more_info = $more_info;\n        }\n}"]],"start1":0,"start2":0,"length1":0,"length2":7127}]],"length":7127,"saved":false}
